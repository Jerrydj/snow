//// SNOW PRELUDE ////


/// Class class ///

Class: Object.new()
Class.instance_prototype: Object.new()
Class.new: [definition] {
	class: Object.new(self)
	class.new: { class.instantiate() }
	class.instance_prototype: Object.new()
	definition.call_with_self(class.instance_prototype)
	class
}
Class.instantiate: {
	// TODO: Constructor arguments
	instance: Object.new(.instance_prototype)
	instance.initialize()
	instance
}

class: [definition] {
	Class.new(definition)
}

// Module
module: [yield] { m: Object.new(); yield.call_with_self(m); m }

// Default constructor does nothing
Object.initialize: {}


/// Handy Object functions ///

Object.inspect: {
	"<" + .name + ":#" + .object_id.to_string(16) + ">"
}

/// Handy Array functions ///

Array.map: [yield] {
	new: @()
	.each { new << yield(it) }
	new
}

Array.inject: [yield] {
	i: 0
	v: yield(.get(i), .get(i:i+1))
	while .length > (i+1)
		v: yield(v, .get(i:i+1))
	end
	v
}
